// –ü—Ä–∏–º–µ—Ä JavaScript —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è prompt engineering

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –û–û–ü –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
class FileAnalyzer {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.cache = new Map();
        this.maxCacheSize = 100;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é LLM
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @returns {Promise<string>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     */
    async analyzeFile(filePath, prompt) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const cacheKey = `${filePath}-${prompt}`;
        if (this.cache.has(cacheKey)) {
            console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞: ${filePath}`);
            return this.cache.get(cacheKey);
        }

        try {
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const content = await this.readFile(filePath);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const analysis = await this.sendToLLM(prompt, content);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.updateCache(cacheKey, analysis);
            
            return analysis;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @returns {Promise<string>} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
     */
    async readFile(filePath) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(`// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${filePath}`);
            }, 100);
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Language Model
     * @param {string} prompt - –ü—Ä–æ–º–ø—Ç
     * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @returns {Promise<string>} –û—Ç–≤–µ—Ç –æ—Ç LLM
     */
    async sendToLLM(prompt, content) {
        // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        const mockResponse = `
        –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.
        
        –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:
        1. –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ JavaScript –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        2. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        - –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é —Å TypeScript
        - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
        - –î–æ–±–∞–≤–∏—Ç—å —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
        `;
        
        return new Promise((resolve) => {
            setTimeout(() => resolve(mockResponse), 1000);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
     * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
     * @param {any} value - –ó–Ω–∞—á–µ–Ω–∏–µ
     */
    updateCache(key, value) {
        if (this.cache.size >= this.maxCacheSize) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–µ–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç (LRU —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        this.cache.set(key, value);
    }

    /**
     * –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
     * @param {string[]} filePaths - –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
     * @param {string} prompt - –û–±—â–∏–π –ø—Ä–æ–º–ø—Ç
     * @returns {Promise<Object[]>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
     */
    async batchAnalysis(filePaths, prompt) {
        const results = [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.allSettled –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        const analyses = await Promise.allSettled(
            filePaths.map(path => this.analyzeFile(path, prompt))
        );
        
        analyses.forEach((result, index) => {
            results.push({
                filePath: filePaths[index],
                status: result.status,
                result: result.status === 'fulfilled' ? result.value : result.reason
            });
        });
        
        return results;
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function demonstrateUsage() {
    const analyzer = new FileAnalyzer('your-api-key');
    
    try {
        // –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        const result = await analyzer.analyzeFile(
            'src/utils.js', 
            '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
        );
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', result);
        
        // –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        const batchResults = await analyzer.batchAnalysis(
            ['src/app.js', 'src/api.js', 'src/config.js'],
            '–ù–∞–π–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ'
        );
        console.log('üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', batchResults);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FileAnalyzer;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    demonstrateUsage();
}